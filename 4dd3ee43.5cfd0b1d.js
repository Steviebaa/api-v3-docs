(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{126:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var s=t(0),r=t.n(s);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},f=r.a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),f=s,h=u["".concat(a,".").concat(f)]||u[f]||d[f]||o;return t?r.a.createElement(h,i(i({ref:n},c),{},{components:t})):r.a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var s=t(3),r=t(7),o=(t(0),t(126)),a={id:"interpreting-the-response",title:"Interpreting the response",sidebar_label:"Interpreting the response"},i={unversionedId:"interpreting-the-response",id:"interpreting-the-response",isDocsHomePage:!1,title:"Interpreting the response",description:"Response",source:"@site/docs/sample-interpreting-the-response.md",slug:"/interpreting-the-response",permalink:"/api/v3/docs/interpreting-the-response",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/sample-interpreting-the-response.md",version:"current",sidebar_label:"Interpreting the response",sidebar:"someSidebar",previous:{title:"Sending the Object",permalink:"/api/v3/docs/sending-the-object"},next:{title:"Sandbox Function Examples",permalink:"/api/v3/docs/sandbox-functions"}},l=[{value:"Response",id:"response",children:[]},{value:"Interpreting the response",id:"interpreting-the-response",children:[]}],c={rightToc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(s.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"response"},"Response"),Object(o.b)("p",null,"The SkyCiv API will run all the functions you define and respond with a JSON object which contains the results in two components. "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"response")," property provides an object containing the results of the last function executed and some additional helpful information. "),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"functions")," property provides an array of objects where each object contains the results of the respective function.")),Object(o.b)("p",null,"Consider the functions we provided in the request object in the ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"/api/v3/docs/the-request-object#basic-usage"}),"Creating the API Object section"),". The ",Object(o.b)("inlineCode",{parentName:"p"},"functions")," property in the response will look as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n    "response": {\n        "data": [...], // Analysis results from the last function - S3D.model.solve\n        "msg": "Non Linear Analysis Successfully Ran",\n        "status": 0, // 0 indicates success, 1 indicates fail.\n        "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n        "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n        }\n    },\n    "functions": [\n        {}, //response for S3D.session.start\n        {}, //response for S3D.model.set\n        {}  //response for S3D.model.solve\n    ]\n}\n\n')),Object(o.b)("br",null),Object(o.b)("hr",null),Object(o.b)("br",null),Object(o.b)("h2",{id:"interpreting-the-response"},"Interpreting the response"),Object(o.b)("p",null,"The API call will provide a response which we conventionally name ",Object(o.b)("inlineCode",{parentName:"p"},"res")," or ",Object(o.b)("inlineCode",{parentName:"p"},"response")," as shown in the previous section. After parsing this to a JSON object (turning the text into a structured object), we can read the data shown in the code block below."),Object(o.b)("p",null,"If ",Object(o.b)("inlineCode",{parentName:"p"},"data.response.status")," equals ",Object(o.b)("inlineCode",{parentName:"p"},"0"),", then all functions have been successfully executed. If the response is greater than or equal to ",Object(o.b)("inlineCode",{parentName:"p"},"1"),", this indicates unsuccessful execution or one or more functions. "),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),'// In the previous section, we received a variable called res which we then parsed as JSON.\nconst parsedResults = JSON.parse(responseData);\n\n// We can dig down into this variable by "chaining" the keys within the object.\n// If our JSON response object looks like this:\n{\n    "response": {\n        "data": [...], // analysis results\n        "msg": "Non Linear Analysis Successfully Ran",\n        "status": 0,\n        "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n        "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n        }\n    },\n    "functions": [\n        {...}, //response for S3D.session.start\n        {...}, //response for S3D.model.set\n        {...}  //response for S3D.model.solve\n    ]\n}\n\n// Then we could do the following to print the value assigned to the "msg" key.\nconsole.log(parsedResults.response.msg)\n// Prints: Non Linear Analysis Successfully Ran\n\n// If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n// differently as it is an array (denoted by the square brackets)\nconsole.log(parsedResults.functions[1].some_key) // Don\'t forget arrays start at 0.\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),'// In the previous section, we received a variable called response which we then parsed to JSON.\n// This "then" gets passed into the next block in a variable named "data" where we can manipulate it.\n\n// We can dig down into this variable by "chaining" the keys within the object.\n// If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], // analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, //response for S3D.session.start\n      {...}, //response for S3D.model.set\n      {...}  //response for S3D.model.solve\n   ]\n}\n\n// Then we could add this inside the "then" block to print the value assigned to the "msg" key.\nconsole.log(data.response.msg)\n// Prints: Non Linear Analysis Successfully Ran\n\n// If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n// differently as it is an array (denoted by the square brackets)\nconsole.log(data.functions[1].some_key) // Don\'t forget arrays start at 0.\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-py"}),'# In the previous section, we received a response which we then parsed to JSON and stored in a variable called parsed_res.\n\n# We can dig down into this variable using the keys within the object.\n# If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], # analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, # response for S3D.session.start\n      {...}, # response for S3D.model.set\n      {...}  # response for S3D.model.solve\n   ]\n}\n\n# Then we could add this code after assigning parsed_res to print the value assigned to the "msg" key.\nprint parsed_res["response"]["msg"]\n# Prints: Non Linear Analysis Successfully Ran\n\n# If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n# differently as it is an array (denoted by the square brackets)\nprint parsed_res["functions"][1]["some_key"] # Don\'t forget arrays start at 0.\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-py"}),'# In the previous section, we received a response which we then parsed to JSON and stored in a variable called parsed_res.\n\n# We can dig down into this variable using the keys within the object.\n# If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], # analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, # response for S3D.session.start\n      {...}, # response for S3D.model.set\n      {...}  # response for S3D.model.solve\n   ]\n}\n\n# Then we could add this code after assigning parsed_res to print the value assigned to the "msg" key.\nprint(parsed_res["response"]["msg"])\n# Prints: Non Linear Analysis Successfully Ran\n\n# If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n# differently as it is an array (denoted by the square brackets)\nprint(parsed_res["functions"][1]["some_key"]) # Don\'t forget arrays start at 0.\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-C#"}),'using Newtonsoft.Json.Linq;\n\n// In the previous section, we stored the API reply in a string named \'response\':\nSkyCiv.TryRequest(jsonRequestBody, out var response, post: true)\n\n// We first need to parse that to a JObject:\nJobject parsed = JObject.Parse(response); // namespace: Newtonsoft.Json.Linq;\n\n// We can dig down into this variable by "chaining" the keys within the object.\n// If our JSON response object looks like this:\n{\n    "response": {\n        "data": [...], // analysis results\n        "msg": "Non Linear Analysis Successfully Ran",\n        "status": 0,\n        "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n        "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n        }\n    },\n    "functions": [\n        {...}, //response for S3D.session.start\n        {...}, //response for S3D.model.set\n        {...}  //response for S3D.model.solve\n    ]\n}\n\n// Then we can do the following to print the value assigned to the "msg" key:\nConsole.Write( parsed["response"]["msg"]?.ToString() ); \n// Note 1: Use ToString() to get a printable result\n// Note 2: Trying to get a property that is not there will return null - catch with null-conditional operator (?.)\n\n// If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n// differently as it is an array (denoted by the square brackets)\nConsole.Write( parsed["functions"][1]["status"].ToString() );  // Don\'t forget arrays start at 0.\n\n')))}p.isMDXComponent=!0}}]);