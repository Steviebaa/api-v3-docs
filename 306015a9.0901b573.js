(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{119:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return p}));var a=t(0),r=t.n(a);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),c=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,p=u["".concat(l,".").concat(m)]||u[m]||b[m]||s;return t?r.a.createElement(p,o(o({ref:n},d),{},{components:t})):r.a.createElement(p,o({ref:n},d))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=m;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<s;d++)l[d]=t[d];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},77:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return c}));var a=t(3),r=t(7),s=(t(0),t(119)),l={id:"s3d-functions",title:"S3D Functions"},o={unversionedId:"s3d-functions",id:"s3d-functions",isDocsHomePage:!1,title:"S3D Functions",description:"Documentation on some functions used in S3D. Need additional functions, email us at support@skyciv.com and let us know!",source:"@site/docs/apps-s3d-functions.md",slug:"/s3d-functions",permalink:"/api-v3-docs/docs/s3d-functions",version:"current",sidebar:"someSidebar",previous:{title:"SkyCiv Add-ons",permalink:"/api-v3-docs/docs/add-ons"}},i=[{value:"Basics",id:"basics",children:[{value:"Clear All",id:"clear-all",children:[]},{value:"Update UI",id:"update-ui",children:[]},{value:"Get Current Model Data",id:"get-current-model-data",children:[]},{value:"Set Model",id:"set-model",children:[]},{value:"Get Analysis Results",id:"get-analysis-results",children:[]}]},{value:"Graphics",id:"graphics",children:[{value:"Highlight an element",id:"highlight-an-element",children:[]},{value:"Locate an element",id:"locate-an-element",children:[]},{value:"Refresh canvas",id:"refresh-canvas",children:[]},{value:"Take Screenshot",id:"take-screenshot",children:[]}]},{value:"Modelling",id:"modelling",children:[{value:"Add/remove a Node",id:"addremove-a-node",children:[]},{value:"Add/Remove a Member",id:"addremove-a-member",children:[]},{value:"Split Member",id:"split-member",children:[]},{value:"Add Point Loads",id:"add-point-loads",children:[]},{value:"Add Distributed Load",id:"add-distributed-load",children:[]},{value:"Meshing/Unmeshing Plates",id:"meshingunmeshing-plates",children:[]}]},{value:"Section Builder",id:"section-builder",children:[{value:"Get Section Library",id:"get-section-library",children:[]}]}],d={toc:i};function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Documentation on some functions used in S3D. Need additional functions, email us at ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"mailto:support@skyciv.com"}),"support@skyciv.com")," and let us know!"),Object(s.b)("h2",{id:"basics"},"Basics"),Object(s.b)("h3",{id:"clear-all"},"Clear All"),Object(s.b)("p",null,"Clears all elements, drawing and starts a new project"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.structure.clear();\n")),Object(s.b)("h3",{id:"update-ui"},"Update UI"),Object(s.b)("p",null,"Syncs the data and UI. Updates the UI, redraws model. All keys are optional."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.UI.update({\n        redraw: true,\n        update_undo_array: false,\n        update_transformations: false,\n        ignore_save_notification: false,\n        refresh_open_datasheet: true,\n        keep_highlight: false,\n        refresh_left_menu: true\n    });\n")),Object(s.b)("h3",{id:"get-current-model-data"},"Get Current Model Data"),Object(s.b)("p",null,"Returns the model data in JSON format. Note: this format is slightly different to the API s3d_model format."),Object(s.b)("p",null,"Users can access this data in two ways. (1) calling S3D.structure.get() or (2) directly access the global arrays which are storing this data. For example, the variable nodes is storing all the nodes in the model. The index in the array is that node's ID."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.structure.get(); // (1) returns all nodes, elements etc...\n\n    //(2) access global variables directly\n    settings; //object of all settings\n\n    nodes; //array of all nodes\n    elements; //array of all members\n    sections;\n    supports;\n    pointLoads;\n    distributedLoads;\n    moments;\n    member_prestress_loads;\n    pressures;\n    area_loads;\n    area_loads_DLs;\n    area_loads_PLs;\n    loadCombos;\n    settlements;\n    plates;\n    meshedPlates;\n    groups;\n    filters;\n\n")),Object(s.b)("h3",{id:"set-model"},"Set Model"),Object(s.b)("p",null,"Sets model data. Data format should be the same as S3D.structure.get();"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.structure.set(model_data, file_name, is_undo, callback);\n")),Object(s.b)("h3",{id:"get-analysis-results"},"Get Analysis Results"),Object(s.b)("p",null,"If your model has been solved, users can download the analysis results. This will return an array of objects, containing all results from that analysis. If arg = true, the function will download all results. If false, it will only return what has already been downloaded. This prevents excessive downloading if not necessary. "),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.results.getAll(true); \n")),Object(s.b)("h2",{id:"graphics"},"Graphics"),Object(s.b)("h3",{id:"highlight-an-element"},"Highlight an element"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'    S3D.graphics.highlightElement("member", 12); //highlight member 12\n')),Object(s.b)("h3",{id:"locate-an-element"},"Locate an element"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'    S3D.graphics.locator("node", 6); //locate node 6\n')),Object(s.b)("h3",{id:"refresh-canvas"},"Refresh canvas"),Object(s.b)("p",null,"Offers a fast, lightweight redraw function. Useful for highlighting an any non-model changes that need re-rendering."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.graphics.refreshAllCanvas(callback);\n")),Object(s.b)("h3",{id:"take-screenshot"},"Take Screenshot"),Object(s.b)("p",null,"Takes a screenshot of what is on the current viewer. Returns the screenshot_data in base64 format."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'    takeScreenshot("return", true, function (screenshot_data) {\n            //callback after screenshot is taken                                         \n    }, 0.3);\n')),Object(s.b)("h2",{id:"modelling"},"Modelling"),Object(s.b)("h3",{id:"addremove-a-node"},"Add/remove a Node"),Object(s.b)("p",null,"Adds a node to the model data. Will not redraw by default ","[call S3D.UI.update({redraw:true}); to redraw]",". We recommend only updating the UI after a lot of changes. "),Object(s.b)("p",null,"The function will return the ID of the added node. If the ID exists, the node will be updated to this location. If a node already exists at this x,y,z location, the function will not another node, instead it will return the existsing node's ID."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.structure.nodes.add({\n        ID: 12, //optional\n        x: 1.5,\n        y: 3,\n        z:0\n    });\n\n    S3D.structure.nodes.remove([2,21]); //removes nodes 2 and 21\n\n    S3D.UI.update({redraw:true}); //will redraw model and refresh UI\n")),Object(s.b)("h3",{id:"addremove-a-member"},"Add/Remove a Member"),Object(s.b)("p",null,"Adds a member to your model. NodeA & NodeB are the only required fields."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'    S3D.structure.members.add({\n        ID: 3, //optional\n        nodeA: 1,\n        nodeB: 5,\n        section_id: 1,\n        type: "continuous", //normal, rigid, tension, compression, cable\n        fixityA: "FFFFFF",\n        fixityB: "FFFFFF",\n        offsetsA: "0,0,0",\n        offsetsB: "0,0,0",\n    });\n\n    S3D.structure.members.remove([2,21]); //removes members 2 and 21\n\n    S3D.UI.update({redraw:true}); //will redraw model and refresh UI - showing the changes\n')),Object(s.b)("h3",{id:"split-member"},"Split Member"),Object(s.b)("p",null,"Here are some sample split member functions of how you can split member 14:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'    S3D.structure.members.intersect({ //splits members by intersecting nodes\n        "typ": "intersectingNodes",\n        "memberNo": 14\n    });\n\n    S3D.structure.members.intersect({ //splits members by % or distance \n        "typ": "splitStr",\n        "memberNo": 14,\n        "splitStr": "50%", //or 1.34 for 1.34m from nodeA\n        "split_nodes_only": false\n    });\n\n    S3D.structure.members.intersect({ //locates any intersecting members and splits them at their intersection\n        "typ": "intersectingMembers",\n        "memberNo": 14,\n        "split_nodes_only": false\n    });\n\n    S3D.structure.members.intersect({\n        "typ": "equalParts",\n        "memberNo": 14,\n        "inc": 4, //how many parts to split\n        "split_nodes_only": true\n    });\n\n    S3D.UI.update({redraw:true}); //will redraw model and refresh UI - showing the changes\n\n    \n')),Object(s.b)("h3",{id:"add-point-loads"},"Add Point Loads"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'\n    S3D.structure.loads.point_loads.add(\n        {\n            node_id: "1", //add y = -1 force at node 1\n            type: "node"\n            xMag: 0,\n            yMag: -1,\n            zMag: 0, \n            LG: \'LG\'\n        }\n      // OR \n        {\n            member_id: "3", //add y = -1.5 point load 50% along a member\n            type: "member"\n            xMag: 0,\n            yMag: -1.5,\n            zMag: 0, \n            pos: 50,\n            LG: \'LG\'\n        }\n    );\n\n')),Object(s.b)("h3",{id:"add-distributed-load"},"Add Distributed Load"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'    S3D.structure.loads.distributed_loads.add({ //apply a -0.5 force/length to member 2\n        member_id: "2",\n        start_xMag: 0,\n        start_yMag: -0.5,\n        start_zMag: 0,   \n        end_xMag: 0,\n        end_yMag: -0.5,\n        end_zMag: 0, \n        LG: \'LG\',\n        axes: "local", //or global to apply loads to global X,Y,Z\n        start_pos: 0,\n        end_pos: 100\n    })\n\n')),Object(s.b)("h3",{id:"meshingunmeshing-plates"},"Meshing/Unmeshing Plates"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    S3D.mesher.meshPlates({\n        plateIDs: [1,2,3],\n        b_nDivisions: 5,\n        h_nDivisions: 5,\n        structuredMeshMethod: 0 //quads\n    });\n\n    S3D.mesher.unMeshPlates([3], true); //unmeshes plate 3 and updates the UI\n\n")),Object(s.b)("h2",{id:"section-builder"},"Section Builder"),Object(s.b)("h3",{id:"get-section-library"},"Get Section Library"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"    SB.library.getTree();\n")))}c.isMDXComponent=!0}}]);