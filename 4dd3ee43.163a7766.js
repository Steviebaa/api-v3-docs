(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{119:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var s=t(0),o=t.n(s);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=o.a.createContext({}),u=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return o.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),b=s,f=p["".concat(a,".").concat(b)]||p[b]||d[b]||r;return t?o.a.createElement(f,i(i({ref:n},c),{},{components:t})):o.a.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<r;c++)a[c]=t[c];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},120:function(e,n,t){"use strict";function s(e){var n,t,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=s(e[n]))&&(o&&(o+=" "),o+=t);else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}n.a=function(){for(var e,n,t=0,o="";t<arguments.length;)(e=arguments[t++])&&(n=s(e))&&(o&&(o+=" "),o+=n);return o}},123:function(e,n,t){"use strict";var s=t(0),o=t(124);n.a=function(){const e=Object(s.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},124:function(e,n,t){"use strict";var s=t(0);const o=Object(s.createContext)(void 0);n.a=o},125:function(e,n,t){"use strict";var s=t(0),o=t.n(s),r=t(123),a=t(120),i=t(55),l=t.n(i);const c=37,u=39;n.a=function(e){const{lazy:n,block:t,defaultValue:i,values:p,groupId:d,className:b}=e,{tabGroupChoices:f,setTabGroupChoices:h}=Object(r.a)(),[m,y]=Object(s.useState)(i),g=s.Children.toArray(e.children);if(null!=d){const e=f[d];null!=e&&e!==m&&p.some((n=>n.value===e))&&y(e)}const v=e=>{y(e),null!=d&&h(d,e)},j=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":t},b)},p.map((({value:e,label:n})=>o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":m===e,className:Object(a.a)("tabs__item",l.a.tabItem,{"tabs__item--active":m===e}),key:e,ref:e=>j.push(e),onKeyDown:e=>{((e,n,t)=>{switch(t.keyCode){case u:((e,n)=>{const t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()})(e,n);break;case c:((e,n)=>{const t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,n)}})(j,e.target,e)},onFocus:()=>v(e),onClick:()=>{v(e)}},n)))),n?Object(s.cloneElement)(g.filter((e=>e.props.value===m))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},g.map(((e,n)=>Object(s.cloneElement)(e,{key:n,hidden:e.props.value!==m})))))}},126:function(e,n,t){"use strict";var s=t(3),o=t(0),r=t.n(o);n.a=function({children:e,hidden:n,className:t}){return r.a.createElement("div",Object(s.a)({role:"tabpanel"},{hidden:n,className:t}),e)}},79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return d}));var s=t(3),o=t(7),r=(t(0),t(119)),a=t(125),i=t(126),l={id:"interpreting-the-response",title:"The Response Object",sidebar_label:"Interpreting the response"},c={unversionedId:"interpreting-the-response",id:"interpreting-the-response",isDocsHomePage:!1,title:"The Response Object",description:"Response",source:"@site/docs/sample-interpreting-the-response.md",slug:"/interpreting-the-response",permalink:"/api-v3-docs/docs/interpreting-the-response",version:"current",sidebar_label:"Interpreting the response",sidebar:"someSidebar",previous:{title:"Sending the Object",permalink:"/api-v3-docs/docs/sending-the-object"},next:{title:"Sandbox Function Examples",permalink:"/api-v3-docs/docs/sandbox-functions"}},u=[{value:"Response",id:"response",children:[]},{value:"Interpreting the response",id:"interpreting-the-response",children:[]}],p={toc:u};function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"response"},"Response"),Object(r.b)("p",null,"The SkyCiv API will run all the functions you define and respond with a JSON object which contains the results in two components. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"response")," property provides an object containing the results of the last function executed and some additional helpful information. "),Object(r.b)("li",{parentName:"ul"},"The ",Object(r.b)("inlineCode",{parentName:"li"},"functions")," property provides an array of objects where each object contains the results of the respective function.")),Object(r.b)("p",null,"Consider the functions we provided in the request object in the ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"/api-v3-docs/docs/the-request-object#basic-usage"}),"Creating the API Object section"),". The ",Object(r.b)("inlineCode",{parentName:"p"},"functions")," property in the response will look as follows:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json",metastring:'title="Response structure"',title:'"Response','structure"':!0}),'{\n    "response": {\n        "data": [...], // Analysis results from the last function - S3D.model.solve\n        "msg": "Non Linear Analysis Successfully Ran",\n        "status": 0, // 0 indicates success, 1 indicates fail.\n        "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n        "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n        }\n    },\n    "functions": [\n        {}, //response for S3D.session.start\n        {}, //response for S3D.model.set\n        {}  //response for S3D.model.solve\n    ]\n}\n\n')),Object(r.b)("br",null),Object(r.b)("hr",null),Object(r.b)("h2",{id:"interpreting-the-response"},"Interpreting the response"),Object(r.b)("p",null,"The API call will provide a response which we conventionally name ",Object(r.b)("inlineCode",{parentName:"p"},"res")," or ",Object(r.b)("inlineCode",{parentName:"p"},"response")," as shown in the previous section. After parsing this to a JSON object (turning the text into a structured object), we can read the data shown in the code block below."),Object(r.b)("p",null,"If ",Object(r.b)("inlineCode",{parentName:"p"},"data.response.status")," equals ",Object(r.b)("inlineCode",{parentName:"p"},"0"),", then all functions have been successfully executed. If the response is greater than or equal to ",Object(r.b)("inlineCode",{parentName:"p"},"1"),", this indicates unsuccessful execution or one or more functions. "),Object(r.b)(a.a,{defaultValue:"node-js",values:[{label:"Node.js",value:"node-js"},{label:"HTML/JS",value:"html-js"},{label:"Python",value:"py"},{label:"C#",value:"cs"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"node-js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),'/* \nIn the previous section, we received a variable \ncalled res which we then parsed as JSON.\n*/\n\nconst parsedResults = JSON.parse(responseData);\n\n// We can dig down into this variable by "chaining" the keys within the object.\n// If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], // analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, //response for S3D.session.start\n      {...}, //response for S3D.model.set\n      {...}  //response for S3D.model.solve\n   ]\n}\n\n// Then we could do the following to print the value assigned to the "msg" key.\nconsole.log(parsedResults.response.msg)\n// Prints: Non Linear Analysis Successfully Ran\n\n// If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n// differently as it is an array (denoted by the square brackets)\nconsole.log(parsedResults.functions[1].some_key) // Don\'t forget arrays start at 0.\n'))),Object(r.b)(i.a,{value:"html-js",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),'/*\n   In the previous section, we received a variable called \n   response which we then parsed to JSON. This "then" gets \n   passed into the next block in a variable named \n   "data" where we can manipulate it.\n   */\n\n// We can dig down into this variable by "chaining" the keys within the object.\n// If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], // analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, //response for S3D.session.start\n      {...}, //response for S3D.model.set\n      {...}  //response for S3D.model.solve\n   ]\n}\n\n// Then we could add this inside the "then" block to print the value assigned to the "msg" key.\nconsole.log(data.response.msg)\n// Prints: Non Linear Analysis Successfully Ran\n\n// If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n// differently as it is an array (denoted by the square brackets)\nconsole.log(data.functions[1].some_key) // Don\'t forget arrays start at 0.\n'))),Object(r.b)(i.a,{value:"py",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-py"}),'# In the previous section, we received a response which we then \n# parsed to JSON and stored in a variable called parsed_res.\n\n# We can dig down into this variable using the keys within the object.\n# If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], # analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, # response for S3D.session.start\n      {...}, # response for S3D.model.set\n      {...}  # response for S3D.model.solve\n   ]\n}\n\n# Then we could add this code after assigning parsed_res to print the value assigned to the "msg" key.\nprint(parsed_res["response"]["msg"])\n# Prints: Non Linear Analysis Successfully Ran\n\n# If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n# differently as it is an array (denoted by the square brackets)\nprint(parsed_res["functions"][1]["some_key"]) # Don\'t forget arrays start at 0.\n'))),Object(r.b)(i.a,{value:"cs",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-cs"}),'using Newtonsoft.Json.Linq;\n\n// In the previous section, we stored the API reply in a string named \'response\':\nSkyCiv.TryRequest(jsonRequestBody, out var response, post: true)\n\n// We first need to parse that to a JObject:\nJobject parsed = JObject.Parse(response); // namespace: Newtonsoft.Json.Linq;\n\n// We can dig down into this variable by "chaining" the keys within the object.\n// If our JSON response object looks like this:\n{\n   "response": {\n      "data": [...], // analysis results\n      "msg": "Non Linear Analysis Successfully Ran",\n      "status": 0,\n      "session_id": "ttaAi9xJSTPwvfzqFmpEiqAYBtf01e7HA3im8toHo4Vgy7y5Q6EgnBU5fk9yrfMC",\n      "monthly_api_credits": {\n            "quota": 6000,\n            "total_used": 22,\n            "used_this_call": 1\n      }\n   },\n   "functions": [\n      {...}, //response for S3D.session.start\n      {...}, //response for S3D.model.set\n      {...}  //response for S3D.model.solve\n   ]\n}\n\n// Then we can do the following to print the value assigned to the "msg" key:\nConsole.Write( parsed["response"]["msg"]?.ToString() ); \n// Note 1: Use ToString() to get a printable result\n// Note 2: Trying to get a property that is not there will return null - catch with null-conditional operator (?.)\n\n// If we needed to retrieve a value from the "S3D.model.set" function then we would access it \n// differently as it is an array (denoted by the square brackets)\nConsole.Write( parsed["functions"][1]["status"].ToString() );  // Don\'t forget arrays start at 0.\n')))))}d.isMDXComponent=!0}}]);